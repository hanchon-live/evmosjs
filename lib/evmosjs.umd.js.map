{"version":3,"file":"evmosjs.umd.js","sources":["../src/rest/client.ts","../src/rest/account.ts","../src/rest/claims.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\n\nexport class RestInstance {\n    protected client: AxiosInstance;\n\n    constructor(endpoint: string) {\n        this.client = axios.create({ baseURL: endpoint })\n    }\n\n    changeEndpoint(endpoint: string) {\n        this.client = axios.create({ baseURL: endpoint })\n    }\n\n    getAxiosInstance() {\n        return this.client\n    }\n\n    get(endpoint: string) {\n        return this.client.get(endpoint)\n    }\n}","import { RestInstance } from './client';\n\nexport interface Account {\n    address: string\n    pubkey: string\n    pubkeyType: string\n    accountNumber: number\n    sequence: number\n    error: string\n}\n\nexport async function getAccount(client: RestInstance, address: string) {\n    try {\n        let res = await client.get(`/cosmos/auth/v1beta1/accounts/${address}`)\n        console.log(res.data)\n        console.log(res.data.account.base_account.pub_key)\n        console.log(res.data.account.base_account.pub_key['@type'])\n        return parseReponse(res.data.account)\n    } catch (e: any) {\n        return {\n            address: '',\n            pubkey: '',\n            pubkeyType: '',\n            accountNumber: -1,\n            sequence: -1,\n            error: e.message\n        }\n    }\n}\n\nfunction parseReponse(account) {\n    if (account.base_account) {\n        return {\n            address: account.base_account.address\n                ? account.base_account.address\n                : '',\n            pubkey: account.base_account.pub_key\n                ? account.base_account.pub_key.key\n                    ? account.base_account.pub_key.key\n                    : ''\n                : '',\n            pubkeyType: account.base_account.pub_key['@type']\n                ? account.base_account.pub_key['@type']\n                : '',\n            accountNumber: account.base_account.account_number\n                ? account.base_account.account_number\n                : 0,\n            sequence: account.base_account.sequence\n                ? account.base_account.sequence\n                : 0,\n            error: '',\n        }\n        throw 'Account response has no base/eth account.'\n    }\n}\n","import { RestInstance } from './client';\nimport { Coin } from './common';\n\n\nexport interface TotalUnclaimed {\n    coins: Coin[],\n    error: string,\n}\n\nexport interface Claim {\n    action: number\n    claimable_amount: string\n    completed: boolean\n}\nexport interface ClaimRecord {\n    initial_claimable_amount: string\n    claims: Claim[]\n    address: string\n    error: string\n}\n\nexport async function getTotalUnclaimed(client: RestInstance) {\n    try {\n        let res = await client.get(`/evmos/claim/v1/total_unclaimed`)\n        return {\n            coins: res.data.coins,\n            error: '',\n        }\n    } catch (e: any) {\n        return {\n            coins: [],\n            error: e.message\n        }\n    }\n}\n\nexport async function getClaimRecords(client: RestInstance, address: string) {\n    try {\n        let res = await client.get(`/evmos/claim/v1/claim_records/${address}`)\n        console.log(res)\n        return parseClaimRecords(res.data, address)\n    } catch (e: any) {\n        return {\n            address: address,\n            initial_claimable_amount: '0',\n            claims: [],\n            error: e.message,\n        }\n    }\n}\n\nfunction parseClaimRecords(response: any, address: string) {\n    let claims: Claim[] = []\n\n    if (response.claims) {\n        response.claims.forEach((e) => {\n            claims.push({\n                action: e.action ? e.action.valueOf() : -1,\n                claimable_amount: e.claimable_amount\n                    ? e.claimable_amount\n                    : '0',\n                completed: e.completed ? e.completed : false,\n            })\n        })\n    }\n    return {\n        initial_claimable_amount: response.initial_claimable_amount\n            ? response.initial_claimable_amount\n            : '0',\n        claims: claims,\n        address: address,\n        error: '',\n    }\n}"],"names":["constructor","endpoint","client","this","axios","create","baseURL","changeEndpoint","getAxiosInstance","get","address","res","console","log","data","account","base_account","pub_key","pubkey","key","pubkeyType","accountNumber","account_number","sequence","error","parseReponse","e","message","response","claims","forEach","push","action","valueOf","claimable_amount","completed","initial_claimable_amount","parseClaimRecords","coins"],"mappings":"mcAKIA,YAAYC,QAFFC,cAGNC,KAAKD,OAASE,UAAMC,OAAO,CAAEC,QAASL,IAG1CM,eAAeN,GACXE,KAAKD,OAASE,UAAMC,OAAO,CAAEC,QAASL,IAG1CO,mBACI,YAAYN,OAGhBO,IAAIR,GACA,YAAYC,OAAOO,IAAIR,2BCPEC,EAAsBQ,sEAE/BR,EAAOO,qCAAqCC,oBAAxDC,GAIJ,OAHAC,QAAQC,IAAIF,EAAIG,MAChBF,QAAQC,IAAIF,EAAIG,KAAKC,QAAQC,aAAaC,SAC1CL,QAAQC,IAAIF,EAAIG,KAAKC,QAAQC,aAAaC,QAAQ,UAc1D,SAAsBF,GAClB,GAAIA,EAAQC,aACR,MAAO,CACHN,QAASK,EAAQC,aAAaN,QACxBK,EAAQC,aAAaN,QACrB,GACNQ,OAAQH,EAAQC,aAAaC,SACvBF,EAAQC,aAAaC,QAAQE,IACzBJ,EAAQC,aAAaC,QAAQE,IAEjC,GACNC,WAAYL,EAAQC,aAAaC,QAAQ,SACnCF,EAAQC,aAAaC,QAAQ,SAC7B,GACNI,cAAeN,EAAQC,aAAaM,eAC9BP,EAAQC,aAAaM,eACrB,EACNC,SAAUR,EAAQC,aAAaO,SACzBR,EAAQC,aAAaO,SACrB,EACNC,MAAO,IAjCJC,CAAad,EAAIG,KAAKC,gFACxBW,GACL,MAAO,CACHhB,QAAS,GACTQ,OAAQ,GACRE,WAAY,GACZC,eAAgB,EAChBE,UAAW,EACXC,MAAOE,EAAEC,YAdrB,+DCyBsCzB,EAAsBQ,kEAEpCR,EAAOO,qCAAqCC,oBAAxDC,GAEJ,OADAC,QAAQC,IAAIF,GAYpB,SAA2BiB,EAAelB,GACtC,IAAImB,EAAkB,GAatB,OAXID,EAASC,QACTD,EAASC,OAAOC,QAASJ,IACrBG,EAAOE,KAAK,CACRC,OAAQN,EAAEM,OAASN,EAAEM,OAAOC,WAAa,EACzCC,iBAAkBR,EAAEQ,iBACdR,EAAEQ,iBACF,IACNC,YAAWT,EAAES,WAAYT,EAAES,cAIhC,CACHC,yBAA0BR,EAASQ,yBAC7BR,EAASQ,yBACT,IACNP,OAAQA,EACRnB,QAASA,EACTc,MAAO,IA/BAa,CAAkB1B,EAAIG,KAAMJ,eAC9BgB,GACL,MAAO,CACHhB,QAASA,EACT0B,yBAA0B,IAC1BP,OAAQ,GACRL,MAAOE,EAAEC,YAVrB,iEAfwCzB,kEAEhBA,EAAOO,sDAAnBE,GACJ,MAAO,CACH2B,MAAO3B,EAAIG,KAAKwB,MAChBd,MAAO,gBAENE,GACL,MAAO,CACHY,MAAO,GACPd,MAAOE,EAAEC,YAVrB"}