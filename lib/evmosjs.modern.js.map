{"version":3,"file":"evmosjs.modern.js","sources":["../src/rest/account.ts","../src/rest/claims.ts","../src/rest/client.ts"],"sourcesContent":["import { RestInstance } from './client'\n\nexport interface Account {\n    address: string\n    pubkey: string\n    pubkeyType: string\n    accountNumber: number\n    sequence: number\n    error: string\n}\n\nexport async function getAccount(client: RestInstance, address: string) {\n    try {\n        let res = await client.get(`/cosmos/auth/v1beta1/accounts/${address}`)\n        return parseReponse(res.data.account)\n    } catch (e: any) {\n        return {\n            address: '',\n            pubkey: '',\n            pubkeyType: '',\n            accountNumber: -1,\n            sequence: -1,\n            error: e.message,\n        }\n    }\n}\n\nfunction parseReponse(account) {\n    if (account.base_account) {\n        return {\n            address: account.base_account.address\n                ? account.base_account.address\n                : '',\n            pubkey: account.base_account.pub_key\n                ? account.base_account.pub_key.key\n                    ? account.base_account.pub_key.key\n                    : ''\n                : '',\n            pubkeyType: account.base_account.pub_key['@type']\n                ? account.base_account.pub_key['@type']\n                : '',\n            accountNumber: account.base_account.account_number\n                ? account.base_account.account_number\n                : 0,\n            sequence: account.base_account.sequence\n                ? account.base_account.sequence\n                : 0,\n            error: '',\n        }\n    }\n    throw 'Account response has no base/eth account.'\n}\n","import { RestInstance } from './client'\nimport { Coin } from './common'\n\nexport interface TotalUnclaimed {\n    coins: Coin[]\n    error: string\n}\n\nexport interface Claim {\n    action: number\n    claimable_amount: string\n    completed: boolean\n}\nexport interface ClaimsRecord {\n    initial_claimable_amount: string\n    claims: Claim[]\n    address: string\n    error: string\n}\n\nexport async function getTotalUnclaimed(client: RestInstance) {\n    try {\n        let res = await client.get(`/evmos/claims/v1/total_unclaimed`)\n        return {\n            coins: res.data.coins,\n            error: '',\n        }\n    } catch (e: any) {\n        return {\n            coins: [],\n            error: e.message,\n        }\n    }\n}\n\nexport async function getClaimsRecord(client: RestInstance, address: string) {\n    try {\n        let res = await client.get(`/evmos/claims/v1/claims_record/${address}`)\n        return parseClaimsRecord(res.data, address)\n    } catch (e: any) {\n        return {\n            address: address,\n            initial_claimable_amount: '0',\n            claims: [],\n            error: e.message,\n        }\n    }\n}\n\nfunction parseClaimsRecord(response: any, address: string) {\n    let claims: Claim[] = []\n\n    if (response.claims) {\n        response.claims.forEach((e) => {\n            claims.push({\n                action: e.action ? e.action.valueOf() : -1,\n                claimable_amount: e.claimable_amount ? e.claimable_amount : '0',\n                completed: e.completed ? e.completed : false,\n            })\n        })\n    }\n    return {\n        initial_claimable_amount: response.initial_claimable_amount\n            ? response.initial_claimable_amount\n            : '0',\n        claims: claims,\n        address: address,\n        error: '',\n    }\n}\n","import axios, { AxiosInstance } from 'axios'\n\nexport class RestInstance {\n    protected client: AxiosInstance\n\n    constructor(endpoint: string) {\n        this.client = axios.create({ baseURL: endpoint })\n    }\n\n    changeEndpoint(endpoint: string) {\n        this.client = axios.create({ baseURL: endpoint })\n    }\n\n    getAxiosInstance() {\n        return this.client\n    }\n\n    get(endpoint: string) {\n        return this.client.get(endpoint)\n    }\n}\n"],"names":["getAccount","client","address","account","base_account","pubkey","pub_key","key","pubkeyType","accountNumber","account_number","sequence","error","parseReponse","get","data","e","message","getTotalUnclaimed","coins","getClaimsRecord","response","claims","forEach","push","action","valueOf","claimable_amount","completed","initial_claimable_amount","parseClaimsRecord","RestInstance","constructor","endpoint","this","axios","create","baseURL","changeEndpoint","getAxiosInstance"],"mappings":"oCAWsBA,EAAWC,EAAsBC,GACnD,IAEI,OAaR,SAAsBC,GAClB,GAAIA,EAAQC,aACR,MAAO,CACHF,QAASC,EAAQC,aAAaF,QACxBC,EAAQC,aAAaF,QACrB,GACNG,OAAQF,EAAQC,aAAaE,SACvBH,EAAQC,aAAaE,QAAQC,IACzBJ,EAAQC,aAAaE,QAAQC,IAEjC,GACNC,WAAYL,EAAQC,aAAaE,QAAQ,SACnCH,EAAQC,aAAaE,QAAQ,SAC7B,GACNG,cAAeN,EAAQC,aAAaM,eAC9BP,EAAQC,aAAaM,eACrB,EACNC,SAAUR,EAAQC,aAAaO,SACzBR,EAAQC,aAAaO,SACrB,EACNC,MAAO,IAGf,KAAM,4CApCKC,QADSZ,EAAOa,qCAAqCZ,MACpCa,KAAKZ,SAC/B,MAAOa,GACL,MAAO,CACHd,QAAS,GACTG,OAAQ,GACRG,WAAY,GACZC,eAAgB,EAChBE,UAAW,EACXC,MAAOI,EAAEC,yBCFCC,EAAkBjB,GACpC,IAEI,MAAO,CACHkB,aAFYlB,EAAOa,yCAERC,KAAKI,MAChBP,MAAO,IAEb,MAAOI,GACL,MAAO,CACHG,MAAO,GACPP,MAAOI,EAAEC,yBAKCG,EAAgBnB,EAAsBC,GACxD,IAEI,OAWR,SAA2BmB,EAAenB,GACtC,IAAIoB,EAAkB,GAWtB,OATID,EAASC,QACTD,EAASC,OAAOC,QAASP,IACrBM,EAAOE,KAAK,CACRC,OAAQT,EAAES,OAAST,EAAES,OAAOC,WAAa,EACzCC,iBAAkBX,EAAEW,iBAAmBX,EAAEW,iBAAmB,IAC5DC,YAAWZ,EAAEY,WAAYZ,EAAEY,cAIhC,CACHC,yBAA0BR,EAASQ,yBAC7BR,EAASQ,yBACT,IACNP,OAAQA,EACRpB,QAASA,EACTU,MAAO,IA7BAkB,QADS7B,EAAOa,sCAAsCZ,MAChCa,KAAMb,GACrC,MAAOc,GACL,MAAO,CACHd,QAASA,EACT2B,yBAA0B,IAC1BP,OAAQ,GACRV,MAAOI,EAAEC,gBC1CRc,EAGTC,YAAYC,QAFFhC,cAGNiC,KAAKjC,OAASkC,EAAMC,OAAO,CAAEC,QAASJ,IAG1CK,eAAeL,GACXC,KAAKjC,OAASkC,EAAMC,OAAO,CAAEC,QAASJ,IAG1CM,mBACI,YAAYtC,OAGhBa,IAAImB,GACA,YAAYhC,OAAOa,IAAImB"}