function e(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t=e(require("axios"));function n(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}exports.RestInstance=class{constructor(e){this.client=void 0,this.client=t.default.create({baseURL:e})}changeEndpoint(e){this.client=t.default.create({baseURL:e})}getAxiosInstance(){return this.client}get(e){return this.client.get(e)}},exports.getAccount=function(e,t){try{return Promise.resolve(function(n,c){try{var a=Promise.resolve(e.get(`/cosmos/auth/v1beta1/accounts/${t}`)).then(function(e){return console.log(e.data),console.log(e.data.account.base_account.pub_key),console.log(e.data.account.base_account.pub_key["@type"]),function(e){if(e.base_account)return{address:e.base_account.address?e.base_account.address:"",pubkey:e.base_account.pub_key&&e.base_account.pub_key.key?e.base_account.pub_key.key:"",pubkeyType:e.base_account.pub_key["@type"]?e.base_account.pub_key["@type"]:"",accountNumber:e.base_account.account_number?e.base_account.account_number:0,sequence:e.base_account.sequence?e.base_account.sequence:0,error:""}}(e.data.account)})}catch(e){return c(e)}return a&&a.then?a.then(void 0,c):a}(0,function(e){return{address:"",pubkey:"",pubkeyType:"",accountNumber:-1,sequence:-1,error:e.message}}))}catch(e){return Promise.reject(e)}},exports.getClaimRecords=function(e,t){try{return Promise.resolve(n(function(){return Promise.resolve(e.get(`/evmos/claim/v1/claim_records/${t}`)).then(function(e){return console.log(e),function(e,t){let n=[];return e.claims&&e.claims.forEach(e=>{n.push({action:e.action?e.action.valueOf():-1,claimable_amount:e.claimable_amount?e.claimable_amount:"0",completed:!!e.completed&&e.completed})}),{initial_claimable_amount:e.initial_claimable_amount?e.initial_claimable_amount:"0",claims:n,address:t,error:""}}(e.data,t)})},function(e){return{address:t,initial_claimable_amount:"0",claims:[],error:e.message}}))}catch(e){return Promise.reject(e)}},exports.getTotalUnclaimed=function(e){try{return Promise.resolve(n(function(){return Promise.resolve(e.get("/evmos/claim/v1/total_unclaimed")).then(function(e){return{coins:e.data.coins,error:""}})},function(e){return{coins:[],error:e.message}}))}catch(e){return Promise.reject(e)}};
//# sourceMappingURL=evmosjs.js.map
