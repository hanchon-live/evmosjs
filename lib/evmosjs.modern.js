import e from"axios";async function a(e,a){try{return function(e){if(e.base_account)return{address:e.base_account.address?e.base_account.address:"",pubkey:e.base_account.pub_key&&e.base_account.pub_key.key?e.base_account.pub_key.key:"",pubkeyType:e.base_account.pub_key["@type"]?e.base_account.pub_key["@type"]:"",accountNumber:e.base_account.account_number?e.base_account.account_number:0,sequence:e.base_account.sequence?e.base_account.sequence:0,error:""};throw"Account response has no base/eth account."}((await e.get(`/cosmos/auth/v1beta1/accounts/${a}`)).data.account)}catch(e){return{address:"",pubkey:"",pubkeyType:"",accountNumber:-1,sequence:-1,error:e.message}}}async function c(e){try{return{coins:(await e.get("/evmos/claims/v1/total_unclaimed")).data.coins,error:""}}catch(e){return{coins:[],error:e.message}}}async function t(e,a){try{return function(e,a){let c=[];return e.claims&&e.claims.forEach(e=>{c.push({action:e.action?e.action.valueOf():-1,claimable_amount:e.claimable_amount?e.claimable_amount:"0",completed:!!e.completed&&e.completed})}),{initial_claimable_amount:e.initial_claimable_amount?e.initial_claimable_amount:"0",claims:c,address:a,error:""}}((await e.get(`/evmos/claims/v1/claims_record/${a}`)).data,a)}catch(e){return{address:a,initial_claimable_amount:"0",claims:[],error:e.message}}}class n{constructor(a){this.client=void 0,this.client=e.create({baseURL:a})}changeEndpoint(a){this.client=e.create({baseURL:a})}getAxiosInstance(){return this.client}get(e){return this.client.get(e)}}export{n as RestInstance,a as getAccount,t as getClaimsRecord,c as getTotalUnclaimed};
//# sourceMappingURL=evmosjs.modern.js.map
